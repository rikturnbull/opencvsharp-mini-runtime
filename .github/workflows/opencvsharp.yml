name: Build-OpenCvSharp

on:
  push:
    branches: 
      - main
    paths: 
      - .github/workflows/opencvsharp.yml
      - 'eng/opencvsharp.patch'
  workflow_dispatch:

env:
  OPENCVSHARP_VERSION: 4.11.0.20250507

jobs:
  build:
    name: Build OpenCvSharp
    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        include:
          #- { os: linux,        arch: x64,   runs-on: ubuntu-22.04 }
          #- { os: ubuntu.24.04, arch: x64,   runs-on: ubuntu-24.04 }
          #- { os: linux,        arch: arm64, runs-on: ubuntu-22.04-arm }
          #- { os: ubuntu.24.04, arch: arm64, runs-on: ubuntu-24.04-arm }
          - { os: win,          arch: x64,   runs-on: windows-2022 }
          - { os: win,          arch: x86,   runs-on: windows-2022 }
          - { os: win11,        arch: x64,   runs-on: windows-2025 }
          - { os: win,          arch: arm64, runs-on: windows-11-arm }
          #- { os: osx,          arch: x64,   runs-on: macos-13 }
          #- { os: osx,          arch: arm64, runs-on: macos-14 }
          #- { os: osx.15,       arch: arm64, runs-on: macos-15 }

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download OpenCV Artifacts
      env:  
        GH_TOKEN: ${{ github.token }}  
      run: |  
        echo "Fetching latest run of opencv.yml on branch ${{ github.ref_name }}"  
        RUN_ID=$(gh run list -R ${{ github.repository }} --workflow=opencv.yml --branch=${{ github.ref_name }} --status=success --limit=1 --json databaseId | jq -r '.[0].databaseId')  
        echo "Latest opencv run ID: $RUN_ID"  
          
        echo "Downloading artifact 'opencv' from run ${RUN_ID}"  
        gh run download -R ${{ github.repository }} $RUN_ID --name opencv-${{ matrix.os }}-${{ matrix.arch }} --dir opencv

        echo "::group::OpenCV Artifacts"
        ls -lR opencv
        echo "::endgroup::"

    - name: Checkout OpenCvSharp
      uses: actions/checkout@v4
      with: 
        repository: shimat/opencvsharp
        ref: ${{ env.OPENCVSHARP_VERSION }}
        path: opencvsharp

    - name: Apply Patches
      run: |
        cd opencvsharp
        git apply --ignore-whitespace ../eng/opencvsharp.patch

    - name: Configure OpenCvSharp
      run: |
        cd opencvsharp && mkdir build && cd build

        if [[ "${{ matrix.os }}" =~ ^win ]]; then
          OpenCV_DIR="${{ github.workspace }}/opencv/${{ matrix.arch }}/vc17/staticlib"
        else
          OpenCV_DIR="${{ github.workspace }}/opencv/lib/cmake/opencv4"
        fi

        EXTRA_FLAGS=""
        if [[ "${{ matrix.os }}" == "win" && "${{ matrix.arch }}" == "x86" ]]; then
          EXTRA_FLAGS+=" -A Win32"
        fi

        cmake \
          -D CMAKE_INSTALL_PREFIX="${{ github.workspace }}/opencvsharp/build" \
          -D OpenCV_DIR="$OpenCV_DIR" \
          $EXTRA_FLAGS \
          ../src

    - name: Build OpenCvSharp
      run: |
        cd opencvsharp/build

        if [[ "${{ matrix.os }}" =~ ^win ]]; then
          cmake --build . --parallel --config Release
        else
          make -j$(nproc)
        fi

    - name: Strip OpenCvSharpExtern
      run: |
        cd opencvsharp/build

        if [[ "${{ matrix.os }}" =~ ^win ]]; then
          BIN="OpenCvSharpExtern/Release/OpenCvSharpExtern.dll"
          llvm-objcopy --strip-all "$BIN"

        elif [[ "${{ matrix.os }}" =~ ^osx ]]; then
          BIN="OpenCvSharpExtern/libOpenCvSharpExtern.dylib"
          strip -x "$BIN"

        else        # Linux
          BIN="OpenCvSharpExtern/libOpenCvSharpExtern.so"
          strip --strip-unneeded "$BIN"
        fi

        echo "Size after strip:"
        du -h "$BIN"

    - name: Show OpenCvSharp Artifacts
      run: |
        cd opencvsharp/build
        echo "::group::OpenCvSharp Artifacts"
        ls -lR
        echo "::endgroup::"

        if [[ ${{ matrix.runs-on }} =~ ^ubuntu ]]; then
          ldd OpenCvSharpExtern/libOpenCvSharpExtern.so
        elif [[ ${{ matrix.os }} =~ ^osx ]]; then
          otool -L OpenCvSharpExtern/libOpenCvSharpExtern.dylib
        fi

    - name: Make artifacts
      run: |
        mkdir artifacts && cd artifacts && mkdir lib test
        if [[ "${{ matrix.os }}" =~ ^win ]]; then
          cp -r ../opencvsharp/build/OpenCvSharpExtern/Release/OpenCvSharpExtern.* ./lib
        else
          cp -r ../opencvsharp/build/OpenCvSharpExtern/libOpenCvSharpExtern.* ./lib
        fi
        ls -lR

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opencvsharp-${{ matrix.os }}-${{ matrix.arch }}
        path: artifacts
